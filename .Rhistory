shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
!length(grep("connect/apps",getwd()))<0
!length(grep("connect/apps",getwd()))<0
!length(grep("connect/apps",getwd()))>0
length(grep("connect/apps",getwd()))>0
# Launch the ShinyApp (Do not remove this comment)
list.of.packages <- c('remotes')
if(length(grep("connect/apps",getwd()))>0){
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) {install.packages(new.packages, dependencies = TRUE)}
remotes::install_deps(upgrade="never")
pkgload::load_all(export_all = FALSE,quiet =T,warn_conflicts =F)
imesc::run_app(options=list(quiet=T,shiny.autoload.r=FALSE))
}else{
shiny::runApp()
}
runApp()
runApp()
shiny::shinyApp(ui="R/app_ui.R", server="R/app_server.R")
shiny::shinyApp(imesc:::app_ui(), imesc:::app_server)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
list.of.packages <- c('remotes')
(!length(grep("connect/apps",getwd()))>0)
length(new.packages)
list.of.packages <- c('remotes')
!length(grep("connect/apps",getwd()))>0
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
length(new.packages)
remotes::install_deps(upgrade="never")
imesc::run_app(options=list(quiet=T,shiny.autoload.r=FALSE))
pkgload::load_all(export_all = FALSE,quiet =T,warn_conflicts =F)
shiny::shinyApp(imesc:::app_ui(), imesc:::app_server)
runApp()
runApp()
runApp()
runApp()
ggspatial:::.fromsi
ggspatial:::.tosi
runApp()
ggspatial:::scalebar_grobs
scalebar_grobs<-function (params, style = c("ticks", "bar"), location = c("bl",
"br", "tr", "tl"), bar_cols = c("black", "white"), line_width = 1,
line_col = "black", height = unit(0.25, "cm"), pad_x = unit(0.25,
"cm"), pad_y = unit(0.25, "cm"), text_pad = unit(0.15,
"cm"), text_cex = 0.7, text_col = "black", text_face = NULL,
text_family = "", tick_height = 0.6)
{
style <- match.arg(style)
location <- match.arg(location)
adj_x <- as.numeric(grepl("r", location))
adj_y <- as.numeric(grepl("t", location))
width <- unit(params$widthnpc, "npc")
origin_x <- unit(adj_x, "npc") - adj_x * width + (0.5 - adj_x) *
2 * pad_x
origin_y <- unit(adj_y, "npc") - adj_y * height + (0.5 -
adj_y) * 2 * pad_y
text_origin_x <- unit(adj_x, "npc") + (0.5 - adj_x) * 2 *
(pad_x + text_pad + width)
text_origin_y <- unit(adj_y, "npc") + (0.5 - adj_y) * 2 *
(pad_y + 0.5 * height)
if (style == "bar") {
bar_grob <- grid::rectGrob(x = origin_x + unit((seq_len(params$majordivs) -
1) * params$majordivnpc, "npc"), y = origin_y, width = unit(params$majordivnpc,
"npc"), height = height, hjust = 0, vjust = 0, gp = grid::gpar(fill = rep(bar_cols,
lengh.out = params$majordivs), col = line_col, lwd = line_width))
}
else if (style == "ticks") {
bar_grob <- grid::gList(grid::segmentsGrob(x0 = origin_x +
unit((seq_len(params$majordivs + 1) - 1) * params$majordivnpc,
"npc"), y0 = origin_y, x1 = origin_x + unit((seq_len(params$majordivs +
1) - 1) * params$majordivnpc, "npc"), y1 = origin_y +
grid::unit.c(height, rep(height * tick_height, params$majordivs -
1), height), gp = grid::gpar(lwd = line_width,
col = line_col)), grid::segmentsGrob(x0 = origin_x,
y0 = origin_y, x1 = origin_x + width, y1 = origin_y,
gp = grid::gpar(lwd = line_width, col = line_col)))
}
else {
stop("not implemented")
}
grid::gList(bar_grob, grid::textGrob(label = params$labeltext,
x = text_origin_x, y = text_origin_y, hjust = adj_x,
vjust = 0.5, gp = grid::gpar(cex = text_cex, col = text_col,
fontfamily = text_family, fontface = text_face)))
}
runApp()
shiny::runApp()
runApp()
!length(grep("connect/apps",getwd()))>0
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
list.of.packages <- c('remotes')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) {install.packages(new.packages, dependencies = TRUE)}
remotes::install_deps(upgrade="never")
imesc::run_app(options=list(quiet=T,shiny.autoload.r=FALSE))
runApp()
ggspatial:::is_grob_like
is.grob
scalebar_params
runApp()
ggspatial:::true_north
runApp()
vals<-readRDS("D:/savepoint.rds")
data_cogs<-list()
vals<-readRDS("D:/savepoint.rds")
vals<-readRDS("D:/Downloads/savepoint.rds")
data_cogs<-list()
names(vals$saved_data)
data_cogs$df<-vals$saved_dta[['X_dados']]
data_cogs$df
data_cogs$df<-vals$saved_data[['X_dados']]
data_cogs$df
is.data.frame(data_cogs$df)
data<-data_cogs$df
factors<-attr(data,"factors")[rownames(data),,drop=F]
factors
coords<-attr(data,"coords")
df<- data.frame(aggregate(data,data.frame(factors[,-ncol(factors), drop=F]),"sum"))
df
!is.null(coords)
dfnum<-df[,which(unlist(lapply(df,is.numeric))), drop=F]
dfnum
dffac<-df[,which(unlist(lapply(df,is.factor))), drop=F]
dffac
df<-dfnum
df
labels<-make.unique(apply(dffac[,input$fac_descs, drop=F], 1 , paste,collapse = "-"))
input<-list()
input$fac_descs<-colnames(factors[,-ncol(factors), drop=F])
data<-data_cogs$df
factors<-attr(data,"factors")[rownames(data),,drop=F]
coords<-attr(data,"coords")
df<- data.frame(aggregate(data,data.frame(factors[,input$fac_descs, drop=F]),get(input$spread_measures)))
input$spread_measures<-"sum"
data<-data_cogs$df
factors<-attr(data,"factors")[rownames(data),,drop=F]
coords<-attr(data,"coords")
df<- data.frame(aggregate(data,data.frame(factors[,input$fac_descs, drop=F]),get(input$spread_measures)))
if(!is.null(coords)){
coords<- data.frame(aggregate(coords,factors[,input$fac_descs, drop=F],mean ))
coords<-coords[,which(unlist(lapply(coords,is.numeric))), drop=F]
rownames(coords)<-rownames(df)
}
dfnum<-df[,which(unlist(lapply(df,is.numeric))), drop=F]
dffac<-df[,which(unlist(lapply(df,is.factor))), drop=F]
df<-dfnum
labels<-make.unique(apply(dffac[,input$fac_descs, drop=F], 1 , paste,collapse = "-"))
rownames(df)<-labels
df<-data_migrate(data,df,"Aggregated_results")
rownames(dffac)<-labels
rownames(coords)<-labels
attr(df,"factors")<-dffac
labels
if(!is.null(coords)){
rownames(coords)<-labels
}
attr(df,"factors")<-dffac
attr(df,"coords")<-coords
#if(anyNA(df)){df<-"Requires groups with at least two counts "}
vals$agg<-df
vals$agg
req(is.data.frame(data_cogs$df))
data<-data_cogs$df
factors<-attr(data,"factors")[rownames(data),,drop=F]
coords<-attr(data,"coords")
df<- data.frame(aggregate(data,data.frame(factors[,input$fac_descs, drop=F]),get(input$spread_measures)))
if(!is.null(coords)){
coords<- data.frame(aggregate(coords,factors[,input$fac_descs, drop=F],mean ))
coords<-coords[,which(unlist(lapply(coords,is.numeric))), drop=F]
rownames(coords)<-rownames(df)
}
dfnum<-df[,which(unlist(lapply(df,is.numeric))), drop=F]
dffac<-df[,which(unlist(lapply(df,is.factor))), drop=F]
df<-dfnum
labels<-make.unique(apply(dffac[,input$fac_descs, drop=F], 1 , paste,collapse = "-"))
rownames(df)<-labels
df<-data_migrate(data,df,"Aggregated_results")
rownames(dffac)<-labels
if(!is.null(coords)){
rownames(coords)<-labels
}
attr(df,"factors")<-dffac
attr(df,"coords")<-coords
#if(anyNA(df)){df<-"Requires groups with at least two counts "}
vals$agg<-df
vals$agg
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
